name: Docker Image CI/CD

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout repository
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Setup Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Build Frontend Docker Image
    - name: Build Frontend Docker Image
      run: |
        docker build ./client \
          --file ./client/Dockerfile \
          --tag frontend:latest

    # Step 4: Build Backend Docker Image
    - name: Build Backend Docker Image
      run: |
        docker build ./Server \
          --file ./Server/Dockerfile \
          --tag backend:latest

    # Step 5: Save Docker Images to Tarballs
    - name: Save Frontend Image to Tarball
      run: docker save frontend:latest -o frontend.tar

    - name: Save Backend Image to Tarball
      run: docker save backend:latest -o backend.tar

    # Step 6: Transfer Docker Images to Server
    - name: Copy Frontend Image to Server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.HOME_SERVER_IP }}
        username: ${{ secrets.HOME_SERVER_USER }}
        key: ${{ secrets.HOME_SERVER_SSH_KEY }}
        source: frontend.tar
        target: /tmp/frontend.tar

    - name: Copy Backend Image to Server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.HOME_SERVER_IP }}
        username: ${{ secrets.HOME_SERVER_USER }}
        key: ${{ secrets.HOME_SERVER_SSH_KEY }}
        source: backend.tar
        target: /tmp/backend.tar

    # Step 7: Load Docker Images and Deploy
    - name: Deploy to Home Server
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.HOME_SERVER_IP }}
        username: ${{ secrets.HOME_SERVER_USER }}
        key: ${{ secrets.HOME_SERVER_SSH_KEY }}
        script: |
          sudo systemctl start docker
          cd ~/my-app
          docker load < /tmp/frontend.tar
          docker load < /tmp/backend.tar
          docker-compose -f docker-compose.yml -f docker-compose.override.prod.yml down
          docker image prune -f
          docker-compose -f docker-compose.yml -f docker-compose.override.prod.yml up -d
          docker-compose logs
